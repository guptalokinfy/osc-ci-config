<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11.1">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>Name of branch Which should be build. If branch does not exist in specific repo master will be used instead.</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>deploy</name>
          <description>Deployment configuration</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>nodeploy</string>
              <string>common</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>install</name>
          <description>If true, runs maven build with unit tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>enable_web_tests</name>
          <description>Run serenity tests</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>run_robot_tests</name>
          <description>Run robot framework tests</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>force_clean_workspace</name>
          <description>Clean the workspace and clone the repos</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>skip_ovf_build</name>
          <description>Skip building and publishing OVF</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>revert_test_environment</name>
          <description>If true, reverts all VM&apos;s snapshots to zero configuration</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>all</name>
          <description>Perform additional build actions or steps to include extra artifacts such as internal and external plugins.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>default_branch</name>
          <description>Default value for building code for version 0.6 / master</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>fork</name>
          <description>Github username which has forked main project</description>
          <defaultValue>opensecuritycontroller</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36">
    <script>def buildVersion = &quot;&quot;
def outputDir = &quot;/var/www/vsc-builds/osc-ovf-parametrized/&quot;
def robotFrameworkTestsDir = &quot;/home/jenkins/repos/robottests/&quot;
def OSC_VM_IP=&apos;&apos;
	
node(&apos;master&apos;) {
	
    stage(&apos;ENV setup master&apos;) {
        env.JAVA_HOME=&quot;${tool name: &apos;Java 8.121&apos;, type: &apos;jdk&apos;}&quot;
        env.PATH=&quot;${env.JAVA_HOME}/bin:${env.PATH}&quot;
    }
    
    stage(&apos;Clean&apos;) {
        if(force_clean_workspace == &quot;true&quot;){
            sh &apos;sudo rm * -rf&apos;
        }
    }
    
    stage(&apos;Git clone&apos;) {
        
        if(force_clean_workspace == &quot;true&quot;){
            sh &apos;mkdir -p osc-core&apos;
        }
        pluginsBranch = &quot;master&quot;
        if (default_branch == &quot;0.6&quot;) {
            pluginsBranch = &quot;1.0.0&quot;
        }
        
        dir (&apos;osc-core&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/osc-core.git&apos;
    		} catch (err) {
                git branch: &apos;${default_branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/osc-core.git&apos;
            }
        }		              
    	
    	if(force_clean_workspace == &quot;true&quot;){
        	bash &apos;mkdir -p security-mgr-api&apos;
    	}
        dir (&apos;security-mgr-api&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/security-mgr-api.git&apos;
    		} catch (err) {
                git branch: pluginsBranch, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/security-mgr-api.git&apos;
            }
        }
		
    	if(force_clean_workspace == &quot;true&quot;){
    	    sh &apos;mkdir -p sdn-controller-api&apos;
    	}
        dir (&apos;sdn-controller-api&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/sdn-controller-api.git&apos;
    		} catch (err) {
                git branch: pluginsBranch, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/sdn-controller-api.git&apos;
            }
        }
		
		if(force_clean_workspace == &quot;true&quot;){
    	    sh &apos;mkdir -p security-mgr-sample-plugin&apos;
    	}
        dir (&apos;security-mgr-sample-plugin&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/security-mgr-sample-plugin.git&apos;
    		} catch (err) {
                git branch: pluginsBranch, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/security-mgr-sample-plugin.git&apos;
            }
        }
 
		if(force_clean_workspace == &quot;true&quot;){
    	    sh &apos;mkdir -p osc-pan-plugin&apos;
    	}
        dir (&apos;osc-pan-plugin&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/osc-pan-plugin.git&apos;
    		} catch (err) {
                git branch: pluginsBranch, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/osc-pan-plugin.git&apos;
            }
        }
		
    	if(force_clean_workspace == &quot;true&quot;){
            sh &apos;mkdir -p sdn-controller-nsc-plugin&apos;
    	}
        dir (&apos;sdn-controller-nsc-plugin&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/sdn-controller-nsc-plugin.git&apos;
    		} catch (err) {
                git branch: pluginsBranch, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/sdn-controller-nsc-plugin.git&apos;
            }
        }
		
		if(force_clean_workspace == &quot;true&quot;) {
			sh &apos;mkdir -p osc-nuage-plugin&apos;
		}
		dir (&apos;osc-nuage-plugin&apos;) {
			try {
				git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/osc-nuage-plugin.git&apos;
			} catch (err) {
				git branch: &apos;${default_branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/osc-nuage-plugin.git&apos;
			}
		}

		if(force_clean_workspace == &quot;true&quot;) {
			sh &apos;mkdir -p sdn-controller-nsfc-plugin&apos;
		}		
        dir (&apos;sdn-controller-nsfc-plugin&apos;) {
    		try {
    			git branch: &apos;${branch}&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/${fork}/sdn-controller-nsfc-plugin.git&apos;
    		} catch (err) {
                git branch: &apos;master&apos;, credentialsId: &apos;oscservice-token&apos;, url: &apos;https://github.com/opensecuritycontroller/sdn-controller-nsfc-plugin.git&apos;
            }
        }
    }
    
    stage(&apos;Build OVF&apos;) {
        if(skip_ovf_build == &quot;true&quot;){
            echo &apos;Skipped&apos;
        } else {
            if(install == &quot;true&quot;) {
                dir (&apos;osc-core&apos;) {
                  sh &apos;ant ovf&apos;
                }
            } else {
                dir (&apos;osc-core&apos;) {
                   sh &apos;ant ovf&apos;
                }
            }
        }
    }
    
    stage(&apos;Publish&apos;) {
        dir (&apos;osc-core&apos;) {
			if(skip_ovf_build == &quot;true&quot;){
			    if(deploy == &quot;nodeploy&quot;) {
			        sh &apos;cd &apos;+outputDir+&apos;upgradebundle/; sudo rm `ls &apos;+outputDir+&apos;upgradebundle/ -t | awk \&apos;NR&gt;4\&apos;` -rf&apos;
				    sh &apos;sudo mv -v target/*.zip &apos; + outputDir + &apos;upgradebundle/serverUpgradeBundle_&apos;+ env.BUILD_NUMBER+&apos;.zip&apos;
				    echo &quot;http://10.3.240.52/osc-ovf-parametrized/upgradebundle/serverUpgradeBundle_&quot;+ env.BUILD_NUMBER+&quot;.zip&quot;
			    } else {
			        echo &apos;Skipped&apos;
			    }
			} else {
			    buildVersion = sh(script: &quot;ls | grep Build* | tr -d &apos;\r&apos; | tr -d &apos;\n&apos;&quot;, returnStdout: true)
    			echo &apos;Found build: &apos; + buildVersion
    			sh &apos;sudo rm &apos; + outputDir + buildVersion + &apos; -rf&apos;
				sh &apos;sudo mv -v &apos;+buildVersion+&apos; &apos; + outputDir
				echo &quot;http://10.3.240.52/osc-ovf-parametrized/&quot;+buildVersion+&quot;/&quot;
			}
	   }
    }
    
    stage(&apos;Clean old builds&apos;) {
        if(skip_ovf_build == &quot;true&quot;){
            echo &apos;Skipped&apos;
        } else {
            sh &apos;cd &apos;+outputDir+&apos;; sudo rm `ls &apos;+outputDir+&apos; -t | awk \&apos;/Build/\&apos; | awk \&apos;NR&gt;4\&apos;` -rf&apos;
        }
    }
 
	stage(&apos;Fetch OVF from Jenkins&apos;) {
	    if(skip_ovf_build == &quot;true&quot; || deploy == &quot;nodeploy&quot;) {
            echo &quot;Skipped&quot;
        } else {
    		sh &apos;mkdir -p ovf&apos;
    		dir(&apos;ovf&apos;){
    			sh &apos;wget http://10.3.240.52/osc-ovf-parametrized/&apos;+buildVersion+&apos;/OSC_disk-0.vmdk --no-proxy&apos;
    			sh &apos;wget http://10.3.240.52/osc-ovf-parametrized/&apos;+buildVersion+&apos;/OSC-&apos; + buildVersion[5..-1]+ &apos;.ovf --no-proxy&apos;
    		}
        }
	}
	
	stage(&apos;Deploy OVF&apos;) {
        if(deploy == &quot;nodeploy&quot;) {
            echo &quot;Skipped deployment&quot;
        } else {
            echo &quot;Deploy on ${deploy}&quot;

            // vSphere/vCenter settings
            def VSPHERE_SDK_URL = &apos;https://XX.XX.XXX.XXX/sdk&apos;
            def VSPHERE_USER = &apos;root&apos;
            def VSPHERE_PASSWORD = &apos;vmware&apos;
            
            // VM deployment settings
            def ESXI_HOST_IP = &apos;XX.XX.XXX.XXX&apos;
            def DATASTORE_NAME = &apos;Data&apos;
            def NETWORK_NAME = &apos;VM Network&apos;
            
			def OSC_VM_NAME=&apos;&apos;
			def OSC_VM_NETMASK=&apos;255.255.254.0&apos;
			def OSC_VM_GATEWAY=&apos;XX.XX.XXX.X&apos;
			def OSC_VM_DNS=&apos;10.102.60.20 10.102.60.30&apos;

            switch (deploy) {
                 case &quot;common&quot;: 
                    echo &quot;Using universal machine settings&quot;
                    // OSC VM settings
                    OSC_VM_NAME=&apos;OSC_common&apos;
                    OSC_VM_IP=&apos;XX.XX.XXX.XXX&apos;
                 break
            }
            if(skip_ovf_build == &quot;false&quot;){
                def OVF_LOCAL_PATH = env.WORKSPACE + &apos;/ovf/OSC-&apos; + buildVersion[5..-1]+ &apos;.ovf&apos;

                sh &apos;java -jar /home/jenkins/repos/osc-tools/deploy-ovf/target/deploy-ovf.jar &apos;+VSPHERE_SDK_URL+&apos; &apos;+VSPHERE_USER+&apos; &apos;+VSPHERE_PASSWORD+&apos; &apos;+ESXI_HOST_IP+&apos; &apos;+ OVF_LOCAL_PATH +&apos; &apos;+OSC_VM_NAME+&apos; &apos;+DATASTORE_NAME+&apos; &quot;&apos;+NETWORK_NAME+&apos;&quot; &apos;+OSC_VM_IP+&apos; &apos;+OSC_VM_NETMASK+&apos; &apos;+OSC_VM_GATEWAY+&apos; &quot;&apos;+OSC_VM_DNS+&apos;&quot;&apos; 
				sh &apos;rm ovf -rf&apos;
            }
            
        }
    }   
	
	stage(&apos;Health check&apos;) {
		if(deploy == &quot;nodeploy&quot;) {
			echo &quot;Skipped health check&quot;
		} else {
			// OSC settings
			def OSC_API_PORT=8090
			
			// FailSafe setings
			INTERVAL=30
			MAX_RETRY_NUMBER=10

			sh &apos;java -jar /home/jenkins/osc-tools/check-machine.jar &apos;+OSC_VM_IP+&apos; &apos;+OSC_API_PORT+&apos; &apos;+INTERVAL+&apos; &apos;+MAX_RETRY_NUMBER
		}
	}
	
	stage(&apos;Run Serenity tests&apos;) {
		if(deploy == &quot;nodeploy&quot; || enable_web_tests == &quot;false&quot; || OSC_VM_IP == &apos;&apos;){
			echo &apos;Skipped run serenity tests&apos;
		} else {
			env.DISPLAY=&apos;:0&apos;
			sh &apos;sed -ie \&apos;s|webdriver.base.url=.*|webdriver.base.url=https://&apos;+OSC_VM_IP+&apos;/|g\&apos; /home/jenkins/repos/osc-tools/automated-tests/serenity.properties&apos;
			sh &apos;xhost +localhost&apos;
			try {
			    sh &apos;mvn clean install -f /home/jenkins/repos/osc-tools/automated-tests/&apos;
			} finally {
			    sh &apos;rm serenity/ -rf&apos;
			    sh &apos;mv /home/jenkins/repos/osc-tools/automated-tests/target/site/serenity $WORKSPACE/&apos;
				stash name: &quot;serenity-output&quot;, includes: &quot;serenity/**/*&quot;
				
				node(&apos;master&apos;) {
					// Run the unstash from within that directory!
					sh &apos;mkdir -p serenity-output&apos;
					dir(&quot;serenity-output&quot;) {
						unstash &quot;serenity-output&quot;
						if(buildVersion == &quot;&quot;) {
						    sh &apos;sudo rm &apos;+outputDir+&apos;last_web_tests -rf&apos;
						    sh &apos;sudo mv -v serenity/ &apos; + outputDir +&quot;last_web_tests&quot;
						    echo &quot;http://10.3.240.52/osc-ovf-parametrized/last_web_tests/&quot;
						} else {
						    sh &apos;sudo mv -v serenity/ &apos; + outputDir + buildVersion + &quot;/&quot;
						    echo &quot;http://10.3.240.52/osc-ovf-parametrized/&quot;+buildVersion+&quot;/serenity/&quot;
						}
					}
				}
			}
		}
	}
	
	stage(&apos;Run robot framework tests&apos;) {
	    if(deploy == &quot;nodeploy&quot; || run_robot_tests == &quot;false&quot; || OSC_VM_IP == &apos;&apos;){
			echo &apos;Skipped&apos;
		} else {
		    sh &apos;sed -ie \&apos;s|${osc-ip}=.*|${osc-ip}=  &apos;+OSC_VM_IP+&apos;|g\&apos; &apos;+robotFrameworkTestsDir+&apos;basic.robot&apos;
		    try {
		        sh &apos;robot -d &apos;+robotFrameworkTestsDir+&apos;basic-results &apos;+robotFrameworkTestsDir+&apos;basic.robot&apos;
		    } finally {
			    sh &apos;rm basic-results/ -rf&apos;
			    sh &apos;mv &apos;+robotFrameworkTestsDir+&apos;basic-results $WORKSPACE/&apos;
				stash name: &quot;robot-output&quot;, includes: &quot;basic-results/**/*&quot;
				
				node(&apos;master&apos;) {
					// Run the unstash from within that directory!
					sh &apos;mkdir -p robot-output&apos;
					dir(&quot;robot-output&quot;) {
						unstash &quot;robot-output&quot;
						
						/*step([$class: &apos;RobotPublisher&apos;,
                              disableArchiveOutput: false,
                              logFileName: &apos;log.html&apos;,
                              otherFiles: &apos;&apos;,
                              outputFileName: &apos;output.xml&apos;,
                              outputPath: &apos;.&apos;,
                              passThreshold: 100,
                              reportFileName: &apos;report.html&apos;,
                              unstableThreshold: 0]);*/
						
						if(buildVersion == &quot;&quot;) {
						    sh &apos;sudo rm &apos;+outputDir+&apos;last_robot_tests -rf&apos;
						    sh &apos;sudo mv -v basic-results/ &apos; + outputDir +&quot;last_robot_tests&quot;
						    echo &quot;http://10.3.240.52/osc-ovf-parametrized/last_robot_tests/&quot;
						} else {
						    sh &apos;sudo mv -v basic-results/ &apos; + outputDir + buildVersion + &quot;/&quot;
						    echo &quot;http://10.3.240.52/osc-ovf-parametrized/&quot;+buildVersion+&quot;/robot-output/&quot;
						}
					}
				}
			}
		}
	}
	
	stage(&apos;Reset test environment&apos;) {
		if(deploy == &quot;nodeploy&quot; || revert_test_environment == &quot;false&quot;) {
			echo &quot;Skipped test environment reset&quot;
		} else {
			echo &quot;Reverting test environment to zero configuration...&quot;
			sh &apos;java -jar /home/jenkins/osc-tools/revert-snapshot/revert-snapshot.jar /home/klocwork/osc-tools/revert-snapshot/config.json&apos;
			// echo &quot;Waiting for openstack to get up...&quot;
			// sh &apos;python /home/klocwork/osc-tools/check-openstack-health/check-openstack-health.py&apos;
		}
	}   
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>